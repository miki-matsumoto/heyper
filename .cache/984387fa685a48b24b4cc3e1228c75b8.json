{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = function (h) {\n  return function (type) {\n    return function (decls) {\n      var parsed;\n      var isDeclsFunction = typeof decls === \"function\";\n      !isDeclsFunction && (parsed = parse(decls));\n      return function (props, children) {\n        props = props || {};\n        isDeclsFunction && (parsed = parse(decls(props)));\n        var node = h(type, props, children);\n        node.props.class = ((node.props.class || \"\") + \" \" + (props.class || \"\") + \" \" + parsed).trim();\n        return node;\n      };\n    };\n  };\n};\n\nvar _id = 0;\nvar sheet = document.head.appendChild(document.createElement(\"style\")).sheet;\n\nfunction hyphenate(str) {\n  return str.replace(/[A-Z]/g, \"-$&\").toLowerCase();\n}\n\nfunction insert(rule) {\n  sheet.insertRule(rule, 0);\n}\n\nfunction createRule(className, decls, media) {\n  var newDecls = [];\n  for (var property in decls) {\n    _typeof(decls[property]) !== \"object\" && newDecls.push(hyphenate(property) + \":\" + decls[property] + \";\");\n  }\n  var rule = \".\" + className + \"{\" + newDecls.join(\"\") + \"}\";\n  return media ? media + \"{\" + rule + \"}\" : rule;\n}\n\nfunction concat(str1, str2) {\n  return str1 + (/^\\w/.test(str2) ? \" \" : \"\") + str2;\n}\n\nfunction parse(decls, child, media, className) {\n  child = child || \"\";\n  className = className || \"p\" + (_id++).toString(36);\n\n  for (var property in decls) {\n    var value = decls[property];\n    if ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === \"object\") {\n      var nextMedia = /^@/.test(property) ? property : null;\n      var nextChild = nextMedia ? child : concat(child, property);\n      parse(value, nextChild, nextMedia, className);\n    }\n  }\n\n  insert(createRule(concat(className, child), decls, media));\n  return className;\n}"},"hash":"f92c36a43468c211fe8dfc1ef420494a"}