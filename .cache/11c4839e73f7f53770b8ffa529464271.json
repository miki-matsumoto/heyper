{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.h = h;\nexports.app = app;\nfunction h(name, props) {\n  var node;\n  var children = [];\n\n  for (var stack = [], i = arguments.length; i-- > 2;) {\n    stack.push(arguments[i]);\n  }\n\n  while (stack.length) {\n    if (Array.isArray(node = stack.pop())) {\n      for (var i = node.length; i--;) {\n        stack.push(node[i]);\n      }\n    } else if (node == null || node === true || node === false) {} else {\n      children.push(node);\n    }\n  }\n\n  return typeof name === \"string\" ? {\n    name: name,\n    props: props || {},\n    children: children\n  } : name(props || {}, children);\n}\n\nfunction app(state, actions, view, container) {\n  var patchLock;\n  var lifecycle = [];\n  var root = container && container.children[0];\n  var node = vnode(root, [].map);\n\n  repaint(init([], state = copy(state), actions = copy(actions)));\n\n  return actions;\n\n  function vnode(element, map) {\n    return element && {\n      name: element.nodeName.toLowerCase(),\n      props: {},\n      children: map.call(element.childNodes, function (element) {\n        return element.nodeType === 3 ? element.nodeValue : vnode(element, map);\n      })\n    };\n  }\n\n  function render(next) {\n    patchLock = !patchLock;\n    next = view(state, actions);\n\n    if (container && !patchLock) {\n      root = patch(container, root, node, node = next);\n    }\n\n    while (next = lifecycle.pop()) {\n      next();\n    }\n  }\n\n  function repaint() {\n    if (!patchLock) {\n      patchLock = !patchLock;\n      setTimeout(render);\n    }\n  }\n\n  function copy(a, b) {\n    var target = {};\n\n    for (var i in a) {\n      target[i] = a[i];\n    }for (var i in b) {\n      target[i] = b[i];\n    }return target;\n  }\n\n  function set(path, value, source, target) {\n    if (path.length) {\n      target[path[0]] = 1 < path.length ? set(path.slice(1), value, source[path[0]], {}) : value;\n      return copy(source, target);\n    }\n    return value;\n  }\n\n  function get(path, source) {\n    for (var i = 0; i < path.length; i++) {\n      source = source[path[i]];\n    }\n    return source;\n  }\n\n  function init(path, slice, actions) {\n    for (var key in actions) {\n      typeof actions[key] === \"function\" ? function (key, action) {\n        actions[key] = function (data) {\n          slice = get(path, state);\n\n          if (typeof (data = action(data)) === \"function\") {\n            data = data(slice, actions);\n          }\n\n          if (data && data !== slice && !data.then) {\n            repaint(state = set(path, copy(slice, data), state, {}));\n          }\n\n          return data;\n        };\n      }(key, actions[key]) : init(path.concat(key), slice[key] = slice[key] || {}, actions[key] = copy(actions[key]));\n    }\n  }\n\n  function getKey(node) {\n    return node && node.props ? node.props.key : null;\n  }\n\n  function setElementProp(element, name, value, oldValue) {\n    if (name === \"key\") {} else if (name === \"style\") {\n      for (var i in copy(oldValue, value)) {\n        element[name][i] = value == null || value[i] == null ? \"\" : value[i];\n      }\n    } else {\n      try {\n        element[name] = value == null ? \"\" : value;\n      } catch (_) {}\n\n      if (typeof value !== \"function\") {\n        if (value == null || value === false) {\n          element.removeAttribute(name);\n        } else {\n          element.setAttribute(name, value);\n        }\n      }\n    }\n  }\n\n  function createElement(node, isSVG) {\n    var element = typeof node === \"string\" || typeof node === \"number\" ? document.createTextNode(node) : (isSVG = isSVG || node.name === \"svg\") ? document.createElementNS(\"http://www.w3.org/2000/svg\", node.name) : document.createElement(node.name);\n\n    if (node.props) {\n      if (node.props.oncreate) {\n        lifecycle.push(function () {\n          node.props.oncreate(element);\n        });\n      }\n\n      for (var i = 0; i < node.children.length; i++) {\n        element.appendChild(createElement(node.children[i], isSVG));\n      }\n\n      for (var name in node.props) {\n        setElementProp(element, name, node.props[name]);\n      }\n    }\n\n    return element;\n  }\n\n  function updateElement(element, oldProps, props) {\n    for (var name in copy(oldProps, props)) {\n      if (props[name] !== (name === \"value\" || name === \"checked\" ? element[name] : oldProps[name])) {\n        setElementProp(element, name, props[name], oldProps[name]);\n      }\n    }\n\n    if (props.onupdate) {\n      lifecycle.push(function () {\n        props.onupdate(element, oldProps);\n      });\n    }\n  }\n\n  function removeChildren(element, node, props) {\n    if (props = node.props) {\n      for (var i = 0; i < node.children.length; i++) {\n        removeChildren(element.childNodes[i], node.children[i]);\n      }\n\n      if (props.ondestroy) {\n        props.ondestroy(element);\n      }\n    }\n    return element;\n  }\n\n  function removeElement(parent, element, node, cb) {\n    function done() {\n      parent.removeChild(removeChildren(element, node));\n    }\n\n    if (node.props && (cb = node.props.onremove)) {\n      cb(element, done);\n    } else {\n      done();\n    }\n  }\n\n  function patch(parent, element, oldNode, node, isSVG, nextSibling) {\n    if (node === oldNode) {} else if (oldNode == null) {\n      element = parent.insertBefore(createElement(node, isSVG), element);\n    } else if (node.name && node.name === oldNode.name) {\n      updateElement(element, oldNode.props, node.props);\n\n      var oldElements = [];\n      var oldKeyed = {};\n      var newKeyed = {};\n\n      for (var i = 0; i < oldNode.children.length; i++) {\n        oldElements[i] = element.childNodes[i];\n\n        var oldChild = oldNode.children[i];\n        var oldKey = getKey(oldChild);\n\n        if (null != oldKey) {\n          oldKeyed[oldKey] = [oldElements[i], oldChild];\n        }\n      }\n\n      var i = 0;\n      var j = 0;\n\n      while (j < node.children.length) {\n        var oldChild = oldNode.children[i];\n        var newChild = node.children[j];\n\n        var oldKey = getKey(oldChild);\n        var newKey = getKey(newChild);\n\n        if (newKeyed[oldKey]) {\n          i++;\n          continue;\n        }\n\n        if (newKey == null) {\n          if (oldKey == null) {\n            patch(element, oldElements[i], oldChild, newChild, isSVG);\n            j++;\n          }\n          i++;\n        } else {\n          var recyledNode = oldKeyed[newKey] || [];\n\n          if (oldKey === newKey) {\n            patch(element, recyledNode[0], recyledNode[1], newChild, isSVG);\n            i++;\n          } else if (recyledNode[0]) {\n            patch(element, element.insertBefore(recyledNode[0], oldElements[i]), recyledNode[1], newChild, isSVG);\n          } else {\n            patch(element, oldElements[i], null, newChild, isSVG);\n          }\n\n          j++;\n          newKeyed[newKey] = newChild;\n        }\n      }\n\n      while (i < oldNode.children.length) {\n        var oldChild = oldNode.children[i];\n        if (getKey(oldChild) == null) {\n          removeElement(element, oldElements[i], oldChild);\n        }\n        i++;\n      }\n\n      for (var i in oldKeyed) {\n        if (!newKeyed[oldKeyed[i][1].props.key]) {\n          removeElement(element, oldKeyed[i][0], oldKeyed[i][1]);\n        }\n      }\n    } else if (node.name === oldNode.name) {\n      element.nodeValue = node;\n    } else {\n      element = parent.insertBefore(createElement(node, isSVG), nextSibling = element);\n      removeElement(parent, nextSibling, oldNode);\n    }\n    return element;\n  }\n}"},"hash":"9cbe0f766e479204471d8425ba308ded"}